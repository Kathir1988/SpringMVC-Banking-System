<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">

  <display-name>Bank</display-name>
  <welcome-file-list>
    <welcome-file>home.html</welcome-file>
    <welcome-file>home.htm</welcome-file>
    <welcome-file>home.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <!-- 
  	ContextLoaderListener reads the Spring configuration file (with value given against contextConfigLocation in web.xml),
  	parses it and loads the singleton bean defined in that config file. Similarly when we want to load prototype bean,
  	we will use same webapplication context to load it. So we initialize the webapplication with ContextLoaderListener so that 
  	we read/parse/validate the config file in advance and whenever we wan to inject dependency we can straightaway do it without any delay.
   -->
      <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>/WEB-INF/dispatcher-servlet.xml</param-value>
    </context-param>

  
  <servlet>
      <servlet-name>dispatcher</servlet-name>
      <servlet-class>
         org.springframework.web.servlet.DispatcherServlet
      </servlet-class>
      <load-on-startup>1</load-on-startup>
   </servlet>

   <servlet-mapping>
      <servlet-name>dispatcher</servlet-name>
      <url-pattern>/</url-pattern>
   </servlet-mapping>
</web-app>